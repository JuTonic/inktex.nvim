---@class Path
---@field path string
---@field _last_slash_index integer
---@field _last_dot_index integer
---@field dir fun(self: Path): string?
---@field file fun(self: Path): string?
---@field stem fun(self: Path): string?
---@field ext fun(self: Path): string?

---@class Path
Path = {}
Path.__index = Path

---@param path string
---@return Path
function Path:new(path)
    local obj = setmetatable({}, self)

    obj.path = path

    obj._last_slash_index = 0
    for i = #path, 1, -1 do
        if path:sub(i, i) == "/" then
            obj._last_slash_index = i
            break
        end
    end

    obj._last_dot_index = #path + 1
    for i = #path, obj._last_slash_index + 2, -1 do
        if path:sub(i, i) == "." then
            obj._last_dot_index = i
            break
        end
    end

    return obj
end

function Path:dir()
    if self._last_slash_index == 0 then
        return nil
    elseif self._last_slash_index == 1 then
        return "/"
    end
    return self.path:sub(1, self._last_slash_index - 1)
end

function Path:file()
    local file = self.path:sub(self._last_slash_index + 1)
    if file ~= "" then
        return file
    end
    return nil
end

function Path:stem()
    local stem =
        self.path:sub(self._last_slash_index + 1, self._last_dot_index - 1)
    if stem ~= "" then
        return stem
    end
    return nil
end

function Path:ext()
    local ext = self.path:sub(self._last_dot_index + 1)
    if ext ~= "" then
        return ext
    end
    return nil
end

---@class InkfigParsed
---@field name string
---@field dir string?

---@param s string
---@return InkfigParsed?
local function parse_inkfig(s)
    local optionals, name = s:match("\\inkfig%s*(.-)%s*{%s*(.-)%s*}")
    if not name or name == "" then
        return
    end

    local dir = optionals:match("%[%s*(.-)%s*%].*")
    if dir == "" then
        dir = nil
    end

    return {
        name = name,
        dir = dir,
    }
end

print(parse_inkfig([[\inkfig[]{  123  }]]).name)
